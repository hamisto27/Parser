/* The following code was generated by JFlex 1.4.3 on 13/12/13 6:48 */

import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/12/13 6:48 from the specification file
 * <tt>Lexer.flex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 10485760;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\2\2\0\1\1\22\0\1\17\6\0\1\51\1\7"+
    "\1\10\1\47\1\5\1\45\1\16\1\6\1\47\1\3\10\4\1\12"+
    "\2\0\1\50\1\46\1\50\2\0\32\14\4\0\1\15\1\0\1\27"+
    "\1\40\1\26\1\21\1\22\1\25\1\33\1\36\1\20\1\41\1\42"+
    "\1\43\1\34\1\23\1\30\1\31\1\14\1\32\1\11\1\24\1\35"+
    "\1\13\1\37\1\14\1\44\1\14\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\2\2\3\1\1\2\4\3\5\1\6\1\4"+
    "\22\6\1\5\1\7\1\1\1\5\2\2\1\10\1\11"+
    "\1\0\1\12\2\0\1\13\1\12\1\0\1\6\1\14"+
    "\4\6\2\0\2\6\1\5\27\6\3\0\1\15\1\0"+
    "\6\6\1\0\1\14\6\6\1\5\1\6\1\5\16\6"+
    "\1\0\1\16\1\6\1\14\1\6\1\5\2\6\1\14"+
    "\1\0\27\6\1\0\1\5\26\6\1\14\3\6\1\5"+
    "\12\6\1\5\10\6\1\5\4\6\1\5\15\6\1\5"+
    "\10\6\1\5\5\6\1\5\5\6\1\5\5\6\1\5"+
    "\3\6\1\5\2\6\1\5\1\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\176\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec"+
    "\0\176\0\u0516\0\u0540\0\u056a\0\u0594\0\u056a\0\176\0\250"+
    "\0\u05be\0\u05e8\0\u0612\0\176\0\u05e8\0\u063c\0\u0666\0\u0690"+
    "\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0"+
    "\0\u0666\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906"+
    "\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56"+
    "\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6"+
    "\0\u0540\0\u0bd0\0\u0bfa\0\176\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2"+
    "\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2"+
    "\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4\0\u0c4e\0\u0eee\0\u0f18"+
    "\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068"+
    "\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a\0\176\0\u1164\0\u118e"+
    "\0\u11b8\0\u1164\0\u11e2\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4"+
    "\0\u12de\0\u1308\0\u1332\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404"+
    "\0\u142e\0\u1458\0\u1482\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554"+
    "\0\u157e\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650\0\u15a8\0\u167a"+
    "\0\u16a4\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca"+
    "\0\u17f4\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a"+
    "\0\u1944\0\u196e\0\u1998\0\u19c2\0\u19ec\0\176\0\u1a16\0\u1a40"+
    "\0\u1a6a\0\u196e\0\u1a94\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66"+
    "\0\u1b90\0\u1bba\0\u1be4\0\u1c0e\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c"+
    "\0\u1cb6\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88\0\u1db2\0\u1ddc"+
    "\0\u1e06\0\u1e30\0\u1e06\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8\0\u1f02"+
    "\0\u1f2c\0\u1f56\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe\0\u2028\0\u2052"+
    "\0\u1f80\0\u207c\0\u20a6\0\u20d0\0\u20fa\0\u2124\0\u214e\0\u2178"+
    "\0\u21a2\0\u20d0\0\u21cc\0\u21f6\0\u2220\0\u224a\0\u2274\0\u21f6"+
    "\0\u229e\0\u22c8\0\u22f2\0\u231c\0\u2346\0\u22f2\0\u2370\0\u239a"+
    "\0\u23c4\0\u23ee\0\u2418\0\u23c4\0\u2442\0\u246c\0\u2496\0\u246c"+
    "\0\u24c0\0\u24ea\0\u24ea\0\176";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\13"+
    "\1\14\1\15\1\16\1\17\1\4\1\11\1\6\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\17\1\36\1\37"+
    "\4\17\3\13\1\40\1\41\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\13\1\14\1\15\1\16\1\17"+
    "\1\4\1\11\1\42\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\17\1\36\1\37\4\17\2\13\1\43\1\40"+
    "\1\41\1\44\1\45\1\46\46\44\1\47\54\0\1\6"+
    "\50\0\1\50\1\6\14\0\1\6\40\0\1\51\46\0"+
    "\2\10\1\0\1\51\3\0\1\10\42\0\1\7\1\10"+
    "\1\0\1\52\3\0\1\10\40\0\1\53\1\54\2\55"+
    "\5\0\1\55\4\0\1\56\35\0\2\57\4\0\1\57"+
    "\1\60\4\57\1\0\2\57\1\61\1\57\1\62\3\57"+
    "\1\63\4\57\1\64\7\57\10\0\2\10\1\0\1\51"+
    "\1\65\2\0\1\10\1\66\41\0\2\57\4\0\6\57"+
    "\1\0\7\57\1\67\15\57\10\0\2\57\4\0\6\57"+
    "\1\0\25\57\10\0\2\57\4\0\6\57\1\0\1\57"+
    "\1\70\3\57\1\71\17\57\10\0\2\57\4\0\6\57"+
    "\1\0\1\72\6\57\1\73\15\57\10\0\2\57\4\0"+
    "\6\57\1\0\3\57\1\74\17\57\1\75\1\57\10\0"+
    "\2\57\4\0\6\57\1\0\10\57\1\76\14\57\10\0"+
    "\2\57\4\0\6\57\1\0\10\57\1\71\1\57\1\77"+
    "\3\57\1\100\6\57\10\0\2\57\4\0\6\57\1\0"+
    "\7\57\1\101\2\57\1\102\12\57\10\0\2\57\4\0"+
    "\6\57\1\0\10\57\1\103\14\57\10\0\2\57\4\0"+
    "\6\57\1\0\1\57\1\104\1\57\1\104\2\57\1\105"+
    "\6\57\1\106\7\57\10\0\2\57\4\0\6\57\1\0"+
    "\12\57\1\71\5\57\1\107\4\57\10\0\2\57\4\0"+
    "\6\57\1\0\1\110\1\57\1\111\7\57\1\112\12\57"+
    "\10\0\2\57\4\0\6\57\1\0\15\57\1\113\7\57"+
    "\10\0\2\57\4\0\6\57\1\0\1\114\24\57\10\0"+
    "\2\57\4\0\6\57\1\0\10\57\1\115\4\57\1\116"+
    "\7\57\10\0\2\57\4\0\6\57\1\0\3\57\1\117"+
    "\21\57\10\0\2\57\4\0\6\57\1\0\10\57\1\120"+
    "\14\57\10\0\2\57\4\0\6\57\1\0\24\57\1\71"+
    "\53\0\1\13\4\0\1\50\1\6\14\0\1\42\27\0"+
    "\1\121\2\0\2\121\1\0\3\121\1\122\43\121\51\44"+
    "\1\0\2\44\1\46\46\44\2\0\1\123\1\124\2\55"+
    "\5\0\1\55\4\0\1\125\35\0\2\55\5\0\1\55"+
    "\41\0\1\54\50\0\1\53\1\54\14\0\1\56\35\0"+
    "\2\126\4\0\6\126\1\0\25\126\10\0\2\126\2\0"+
    "\1\65\1\0\2\126\1\127\3\126\1\0\25\126\10\0"+
    "\2\126\4\0\6\126\1\0\6\126\1\130\16\126\10\0"+
    "\2\126\4\0\6\126\1\0\10\126\1\131\14\126\10\0"+
    "\2\126\4\0\6\126\1\0\15\126\1\132\7\126\10\0"+
    "\2\126\4\0\6\126\1\0\20\126\1\133\4\126\11\0"+
    "\1\134\5\0\1\134\51\0\1\135\42\0\2\126\4\0"+
    "\6\126\1\0\23\126\1\136\1\126\10\0\2\126\4\0"+
    "\6\126\1\0\2\126\1\137\22\126\10\0\2\126\4\0"+
    "\1\140\1\126\1\141\3\126\1\0\25\126\10\0\2\126"+
    "\4\0\6\126\1\0\4\126\1\142\20\126\10\0\2\126"+
    "\4\0\2\126\1\143\3\126\1\0\1\126\1\144\23\126"+
    "\10\0\2\126\4\0\1\145\5\126\1\0\25\126\10\0"+
    "\2\126\4\0\6\126\1\0\4\126\1\146\20\126\10\0"+
    "\2\126\4\0\6\126\1\0\15\126\1\145\7\126\10\0"+
    "\2\126\4\0\6\126\1\0\2\126\1\147\22\126\10\0"+
    "\2\126\4\0\6\126\1\0\23\126\1\150\1\126\10\0"+
    "\2\126\4\0\6\126\1\0\10\126\1\151\14\126\10\0"+
    "\2\126\4\0\6\126\1\0\3\126\1\152\10\126\1\153"+
    "\10\126\10\0\2\126\4\0\6\126\1\0\1\126\1\146"+
    "\23\126\10\0\2\126\4\0\6\126\1\0\6\126\1\154"+
    "\16\126\10\0\2\126\4\0\6\126\1\0\4\126\1\155"+
    "\20\126\10\0\2\126\4\0\6\126\1\0\21\126\1\156"+
    "\3\126\10\0\2\126\4\0\6\126\1\0\6\126\1\146"+
    "\16\126\10\0\2\126\4\0\6\126\1\0\12\126\1\157"+
    "\12\126\10\0\2\126\4\0\6\126\1\0\10\126\1\160"+
    "\14\126\10\0\2\126\4\0\6\126\1\0\3\126\1\146"+
    "\21\126\10\0\2\126\4\0\2\126\1\161\3\126\1\0"+
    "\25\126\10\0\2\126\4\0\2\126\1\145\3\126\1\0"+
    "\25\126\10\0\2\126\4\0\6\126\1\0\23\126\1\162"+
    "\1\126\10\0\2\126\4\0\6\126\1\0\4\126\1\163"+
    "\20\126\10\0\2\126\4\0\6\126\1\0\12\126\1\164"+
    "\12\126\5\0\1\121\1\165\1\166\3\121\1\122\10\121"+
    "\1\122\32\121\2\0\1\124\50\0\1\123\1\124\14\0"+
    "\1\125\35\0\2\167\4\0\6\167\1\0\25\167\10\0"+
    "\2\167\4\0\1\167\1\170\4\167\1\0\25\167\10\0"+
    "\2\167\4\0\6\167\1\0\4\167\1\171\20\167\10\0"+
    "\2\167\4\0\6\167\1\0\11\167\1\172\13\167\10\0"+
    "\2\167\4\0\6\167\1\0\12\167\1\173\12\167\10\0"+
    "\2\167\4\0\6\167\1\0\4\167\1\174\20\167\10\0"+
    "\2\134\3\0\1\175\1\0\1\134\46\0\1\176\45\0"+
    "\2\167\4\0\6\167\1\0\15\167\1\177\7\167\10\0"+
    "\2\167\4\0\6\167\1\0\3\167\1\200\21\167\10\0"+
    "\2\167\4\0\6\167\1\0\11\167\1\201\13\167\10\0"+
    "\2\167\4\0\6\167\1\0\1\202\24\167\10\0\2\167"+
    "\4\0\6\167\1\0\2\167\1\203\4\167\1\172\15\167"+
    "\10\0\2\167\4\0\6\167\1\0\1\204\24\167\10\0"+
    "\2\167\4\0\5\167\1\205\1\0\25\167\10\0\2\167"+
    "\4\0\6\167\1\0\2\167\1\172\22\167\10\0\2\167"+
    "\4\0\6\167\1\0\3\167\1\172\21\167\10\0\2\167"+
    "\4\0\1\177\5\167\1\0\25\167\10\0\2\167\4\0"+
    "\6\167\1\0\14\167\1\172\10\167\10\0\2\167\4\0"+
    "\6\167\1\0\5\167\1\206\17\167\10\0\2\167\4\0"+
    "\6\167\1\0\11\167\1\207\13\167\10\0\2\167\4\0"+
    "\6\167\1\0\2\167\1\210\22\167\10\0\2\167\4\0"+
    "\6\167\1\0\16\167\1\211\6\167\10\0\2\167\4\0"+
    "\6\167\1\0\2\167\1\212\22\167\10\0\2\167\4\0"+
    "\6\167\1\0\5\167\1\213\17\167\10\0\2\167\4\0"+
    "\6\167\1\0\6\167\1\214\4\167\1\215\11\167\10\0"+
    "\2\167\4\0\6\167\1\0\1\216\24\167\10\0\2\167"+
    "\4\0\6\167\1\0\4\167\1\217\20\167\10\0\2\167"+
    "\4\0\6\167\1\0\1\220\24\167\10\0\2\167\4\0"+
    "\6\167\1\0\22\167\1\221\2\167\5\0\2\121\1\166"+
    "\3\121\1\122\43\121\3\0\2\222\4\0\6\222\1\0"+
    "\25\222\10\0\2\222\2\0\1\176\1\0\6\222\1\0"+
    "\25\222\10\0\2\222\4\0\6\222\1\0\1\223\24\222"+
    "\10\0\2\222\4\0\6\222\1\0\6\222\1\224\16\222"+
    "\10\0\2\222\4\0\6\222\1\0\12\222\1\225\12\222"+
    "\20\0\1\66\42\0\1\226\5\0\1\226\42\0\2\222"+
    "\4\0\6\222\1\0\2\222\1\227\22\222\10\0\2\222"+
    "\4\0\6\222\1\0\4\222\1\230\20\222\10\0\2\222"+
    "\4\0\6\222\1\0\23\222\1\231\1\222\10\0\2\222"+
    "\4\0\1\232\5\222\1\0\1\222\1\233\23\222\10\0"+
    "\2\222\4\0\5\222\1\234\1\0\25\222\10\0\2\222"+
    "\4\0\6\222\1\0\12\222\1\235\12\222\10\0\2\222"+
    "\4\0\6\222\1\0\1\236\24\222\10\0\2\222\4\0"+
    "\6\222\1\0\1\237\24\222\10\0\2\222\4\0\6\222"+
    "\1\0\15\222\1\240\7\222\10\0\2\222\4\0\6\222"+
    "\1\0\11\222\1\241\13\222\10\0\2\222\4\0\6\222"+
    "\1\0\10\222\1\242\14\222\10\0\2\222\4\0\6\222"+
    "\1\0\6\222\1\243\16\222\10\0\2\222\4\0\6\222"+
    "\1\0\10\222\1\244\14\222\10\0\2\222\4\0\6\222"+
    "\1\0\2\222\1\245\22\222\10\0\2\222\4\0\6\222"+
    "\1\0\12\222\1\246\12\222\10\0\2\222\4\0\6\222"+
    "\1\0\3\222\1\247\21\222\10\0\2\222\4\0\6\222"+
    "\1\0\1\250\24\222\10\0\2\222\4\0\6\222\1\0"+
    "\23\222\1\227\1\222\10\0\2\222\4\0\6\222\1\0"+
    "\1\251\24\222\10\0\2\252\4\0\6\252\1\0\25\252"+
    "\10\0\2\252\4\0\6\252\1\0\10\252\1\253\14\252"+
    "\10\0\2\252\4\0\6\252\1\0\2\252\1\254\22\252"+
    "\10\0\2\252\4\0\6\252\1\0\7\252\1\255\15\252"+
    "\10\0\2\226\3\0\1\256\1\0\1\226\42\0\2\252"+
    "\4\0\6\252\1\0\1\257\24\252\10\0\2\252\4\0"+
    "\6\252\1\0\7\252\1\260\15\252\10\0\2\252\4\0"+
    "\6\252\1\0\1\261\24\252\10\0\2\252\4\0\6\252"+
    "\1\0\2\252\1\262\22\252\10\0\2\252\4\0\6\252"+
    "\1\0\17\252\1\263\5\252\10\0\2\252\4\0\6\252"+
    "\1\0\10\252\1\264\14\252\10\0\2\252\4\0\6\252"+
    "\1\0\5\252\1\262\17\252\10\0\2\252\4\0\6\252"+
    "\1\0\13\252\1\265\11\252\10\0\2\252\4\0\6\252"+
    "\1\0\4\252\1\266\20\252\10\0\2\252\4\0\6\252"+
    "\1\0\4\252\1\262\20\252\10\0\2\252\4\0\6\252"+
    "\1\0\12\252\1\262\12\252\10\0\2\252\4\0\6\252"+
    "\1\0\4\252\1\254\20\252\10\0\2\252\4\0\6\252"+
    "\1\0\12\252\1\267\12\252\10\0\2\252\4\0\6\252"+
    "\1\0\1\252\1\270\23\252\10\0\2\252\4\0\6\252"+
    "\1\0\7\252\1\271\15\252\10\0\2\252\4\0\6\252"+
    "\1\0\13\252\1\262\11\252\10\0\2\252\4\0\6\252"+
    "\1\0\11\252\1\272\13\252\10\0\2\252\4\0\6\252"+
    "\1\0\3\252\1\273\21\252\10\0\2\274\4\0\6\274"+
    "\1\0\25\274\10\0\2\274\4\0\6\274\1\0\3\274"+
    "\1\275\21\274\10\0\2\274\4\0\5\274\1\276\1\0"+
    "\25\274\10\0\2\274\4\0\6\274\1\0\6\274\1\277"+
    "\16\274\10\0\2\274\4\0\6\274\1\0\5\274\1\300"+
    "\17\274\10\0\2\274\4\0\6\274\1\0\24\274\1\275"+
    "\10\0\2\274\4\0\6\274\1\0\10\274\1\301\14\274"+
    "\10\0\2\274\4\0\6\274\1\0\12\274\1\302\12\274"+
    "\10\0\2\274\4\0\6\274\1\0\3\274\1\303\21\274"+
    "\10\0\2\274\4\0\6\274\1\0\15\274\1\304\7\274"+
    "\10\0\2\274\4\0\6\274\1\0\2\274\1\275\22\274"+
    "\10\0\2\274\4\0\6\274\1\0\14\274\1\275\10\274"+
    "\10\0\2\274\4\0\6\274\1\0\15\274\1\305\7\274"+
    "\10\0\2\274\4\0\6\274\1\0\14\274\1\306\10\274"+
    "\10\0\2\274\4\0\6\274\1\0\23\274\1\307\1\274"+
    "\10\0\2\274\4\0\6\274\1\0\13\274\1\310\11\274"+
    "\10\0\2\311\4\0\6\311\1\0\25\311\10\0\2\311"+
    "\4\0\6\311\1\0\6\311\1\312\16\311\10\0\2\311"+
    "\4\0\6\311\1\0\4\311\1\313\20\311\10\0\2\311"+
    "\4\0\6\311\1\0\1\314\24\311\10\0\2\311\4\0"+
    "\6\311\1\0\3\311\1\313\21\311\10\0\2\311\4\0"+
    "\6\311\1\0\1\315\24\311\10\0\2\311\4\0\6\311"+
    "\1\0\14\311\1\316\10\311\10\0\2\311\4\0\6\311"+
    "\1\0\12\311\1\317\12\311\10\0\2\311\4\0\6\311"+
    "\1\0\12\311\1\320\12\311\10\0\2\311\4\0\5\311"+
    "\1\321\1\0\25\311\10\0\2\311\4\0\6\311\1\0"+
    "\24\311\1\313\10\0\2\311\4\0\5\311\1\322\1\0"+
    "\25\311\10\0\2\323\4\0\6\323\1\0\25\323\10\0"+
    "\2\323\4\0\6\323\1\0\10\323\1\324\14\323\10\0"+
    "\2\323\4\0\6\323\1\0\6\323\1\325\16\323\10\0"+
    "\2\323\4\0\6\323\1\0\4\323\1\326\20\323\10\0"+
    "\2\323\4\0\6\323\1\0\2\323\1\327\22\323\10\0"+
    "\2\323\4\0\6\323\1\0\7\323\1\330\15\323\10\0"+
    "\2\323\4\0\6\323\1\0\2\323\1\331\22\323\10\0"+
    "\2\323\4\0\6\323\1\0\1\332\24\323\10\0\2\323"+
    "\4\0\1\333\5\323\1\0\25\323\10\0\2\334\4\0"+
    "\6\334\1\0\25\334\10\0\2\334\4\0\6\334\1\0"+
    "\14\334\1\335\10\334\10\0\2\334\4\0\6\334\1\0"+
    "\7\334\1\336\15\334\10\0\2\334\4\0\6\334\1\0"+
    "\4\334\1\337\20\334\10\0\2\334\4\0\6\334\1\0"+
    "\3\334\1\340\21\334\10\0\2\334\4\0\6\334\1\0"+
    "\4\334\1\341\20\334\10\0\2\334\4\0\6\334\1\0"+
    "\1\334\1\342\23\334\10\0\2\334\4\0\6\334\1\0"+
    "\4\334\1\343\20\334\10\0\2\344\4\0\6\344\1\0"+
    "\25\344\10\0\2\344\4\0\6\344\1\0\11\344\1\345"+
    "\13\344\10\0\2\344\4\0\6\344\1\0\4\344\1\346"+
    "\20\344\10\0\2\344\4\0\6\344\1\0\2\344\1\347"+
    "\22\344\10\0\2\344\4\0\6\344\1\0\4\344\1\350"+
    "\20\344\10\0\2\344\4\0\6\344\1\0\1\351\24\344"+
    "\10\0\2\344\4\0\6\344\1\0\10\344\1\352\14\344"+
    "\10\0\2\353\4\0\6\353\1\0\25\353\10\0\2\353"+
    "\4\0\6\353\1\0\15\353\1\354\7\353\10\0\2\353"+
    "\4\0\6\353\1\0\1\355\24\353\10\0\2\353\4\0"+
    "\6\353\1\0\3\353\1\356\21\353\10\0\2\353\4\0"+
    "\6\353\1\0\10\353\1\357\14\353\10\0\2\353\4\0"+
    "\6\353\1\0\12\353\1\360\12\353\10\0\2\361\4\0"+
    "\6\361\1\0\25\361\10\0\2\361\4\0\6\361\1\0"+
    "\4\361\1\362\20\361\10\0\2\361\4\0\6\361\1\0"+
    "\10\361\1\363\14\361\10\0\2\361\4\0\6\361\1\0"+
    "\3\361\1\364\21\361\10\0\2\361\4\0\6\361\1\0"+
    "\7\361\1\365\15\361\10\0\2\366\4\0\6\366\1\0"+
    "\25\366\10\0\2\366\4\0\6\366\1\0\2\366\1\367"+
    "\22\366\10\0\2\366\4\0\6\366\1\0\3\366\1\370"+
    "\21\366\10\0\2\366\4\0\6\366\1\0\13\366\1\371"+
    "\11\366\10\0\2\372\4\0\6\372\1\0\25\372\10\0"+
    "\2\372\4\0\6\372\1\0\12\372\1\373\12\372\10\0"+
    "\2\372\4\0\6\372\1\0\2\372\1\373\22\372\10\0"+
    "\2\374\4\0\6\374\1\0\25\374\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9492];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\1\11\6\1\1\11\25\1\1\11\5\1\1\11"+
    "\1\0\1\1\2\0\1\11\1\1\1\0\6\1\2\0"+
    "\32\1\3\0\1\11\1\0\6\1\1\0\30\1\1\0"+
    "\1\11\7\1\1\0\27\1\1\0\27\1\1\11\115\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public static enum Division{IDENTIFICATION,ENVIRONMENT,DATA,PROCEDURE};
	
	private StringBuffer str		= null;
	private Division division		= null;
	private Division lastDivision	= null;
	private String lastIdentifier = null;
	private boolean valued			= false;
	
	private final void setDivision(Division division){
		this.division = division;
	}
	public Division getDivision(){
		return this.division;
	}
	private Map<String,Symbol<?>> tableOfSymbols = new HashMap<String,Symbol<?>>();
	public Map<String,Symbol<?>> getTableOfSymbols(){
		return tableOfSymbols;
	}
	private Symbol found(LexicalUnit unit,String rawText,final int lineNumber,final int columnNumber)throws java.io.IOException{
		Symbol<String> symbol = new Symbol(unit);
		symbol.put(Symbol.LINE,new Integer(lineNumber));
		symbol.put(Symbol.COLUMN,new Integer(columnNumber));
		symbol.setValue(rawText);
		
		switch(unit){
			case DIVISION:	setDivision(lastDivision); break;
			case IDENTIFICATION:
			case ENVIRONMENT:
			case DATA:
			case PROCEDURE: lastDivision = Division.valueOf(unit.toString()); break;
			case PROGRAM: setDivision(null); break;
			default: lastDivision = null;
		}
		if(getDivision() != null && getDivision().equals(Division.DATA)){
			if(unit.equals(LexicalUnit.IDENTIFIER)){
				lastIdentifier	= rawText;
				if(tableOfSymbols.containsKey(lastIdentifier)) yywarning("The variable \""+rawText+"\" is already defined");
				else tableOfSymbols.put(lastIdentifier,symbol);
			}else if(unit.equals(LexicalUnit.VALUE)){
				valued = true;
			}else if(valued){
				valued = false;
				if(lastIdentifier == null) yywarning("Try to assign a value to an inexistant identifier");
				else tableOfSymbols.get(lastIdentifier).put(Symbol.CONTENT,rawText);
			}else{
				if(lastIdentifier != null && unit.equals(LexicalUnit.INTEGER) || unit.equals(LexicalUnit.IDENTIFIER)){
					symbol = new Symbol(LexicalUnit.IMAGE);
					symbol.put(Symbol.LINE,new Integer(lineNumber));
					symbol.put(Symbol.COLUMN,new Integer(columnNumber));
					symbol.setValue(rawText);
				}
				if(symbol.unit.equals(LexicalUnit.IMAGE)){
					if(lastIdentifier == null) yywarning("Try to assign an image to an inexistant identifier");
					else tableOfSymbols.get(lastIdentifier).put(Symbol.IMAGE,rawText);
				}
			}
		}else if(symbol.unit.equals(LexicalUnit.IMAGE)){ //convert image in bad cases
			if(rawText.charAt(0) == '9'){
				yypushback(rawText.length()-1);
				rawText = rawText.substring(0,1);
			}else	if(rawText.contains("(")){
				yypushback(rawText.length()-rawText.indexOf('('));
				rawText = rawText.substring(0,rawText.indexOf('('));
			}
			
			if(rawText.equals("9")){
				symbol = new Symbol(LexicalUnit.INTEGER);
				symbol.put(Symbol.LINE,new Integer(lineNumber));
				symbol.put(Symbol.COLUMN,new Integer(columnNumber));
				symbol.setValue(rawText);
			}else{
				symbol = new Symbol(LexicalUnit.IDENTIFIER);
				symbol.put(Symbol.LINE,new Integer(lineNumber));
				symbol.put(Symbol.COLUMN,new Integer(columnNumber));
				symbol.setValue(rawText);
			}
		}
		
		if(getDivision() != null && getDivision().equals(Division.PROCEDURE)){
			valued = false;
			if(symbol.unit.equals(LexicalUnit.IDENTIFIER) && lastIdentifier == null){
				lastIdentifier = symbol.getValue();
				if(tableOfSymbols.get(lastIdentifier)!= null){/* yywarning("The variable or label \""+lastIdentifier+"\" is already defined");*/}
				else{
					tableOfSymbols.put(lastIdentifier,symbol);
					valued = true;
				}
			}else if(symbol.unit.equals(LexicalUnit.SECTION)){
				forgotLabel(lastIdentifier);
			}
		}
		
		
		return symbol;
	}
	private void forgotLabel(final String identifier){
		Symbol<String> label = null;
		try{
			label = (Symbol<String>)tableOfSymbols.get(identifier);
			if(label != null && label.containsKey(Symbol.IMAGE))
				label = null;//because it is a variable
		}catch(ClassCastException cce){ cce.printStackTrace(); /* we just ignore remaining information from the table*/}
		if(label != null) tableOfSymbols.put(identifier,null);
	}
	protected void yyerror(String message){
		System.err.println(message);
		System.exit(-1);
	}
	protected void yywarning(String message){
		System.err.println(message);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
  	yyline++;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 112) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { yyerror("Not a lexical unit("+yyline+","+yycolumn+"): \""+yytext()+"\"");
          }
        case 15: break;
        case 9: 
          { yybegin(YYINITIAL); return found(LexicalUnit.STRING,"'"+str.toString()+"'",yyline,yycolumn);
          }
        case 16: break;
        case 5: 
          { return found(LexicalUnit.convert(yytext()),yytext(),yyline,yycolumn);
          }
        case 17: break;
        case 14: 
          { /* just skip white spaces and comments */
          }
        case 18: break;
        case 2: 
          { str.append(yytext());
          }
        case 19: break;
        case 11: 
          { if(getDivision() != null && getDivision().equals(Division.PROCEDURE) && lastIdentifier != null && valued == false){
									forgotLabel(lastIdentifier);
								}
								lastIdentifier = null;
								return found(LexicalUnit.convert("end-of-instruction"),yytext().replaceAll("\r","\\\\r").replaceAll("\n","\\\\n"),yyline,yycolumn);
          }
        case 20: break;
        case 6: 
          { return found(LexicalUnit.IDENTIFIER,yytext(),yyline,yycolumn);
          }
        case 21: break;
        case 7: 
          { str = new StringBuffer();yybegin(STRING);
          }
        case 22: break;
        case 12: 
          { return found(LexicalUnit.IMAGE,yytext(),yyline,yycolumn);
          }
        case 23: break;
        case 4: 
          { return found(LexicalUnit.INTEGER,yytext(),yyline,yycolumn);
          }
        case 24: break;
        case 8: 
          { yyerror("End of line without ending String");
          }
        case 25: break;
        case 1: 
          { /* just skip white spaces */
          }
        case 26: break;
        case 10: 
          { return found(LexicalUnit.REAL,yytext(),yyline,yycolumn);
          }
        case 27: break;
        case 13: 
          { yypushback(yylength()-yytext().lastIndexOf('.'));
								String str = yytext().trim();
								return found(LexicalUnit.INTEGER,str,yyline,yycolumn);
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return new Symbol(LexicalUnit.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
